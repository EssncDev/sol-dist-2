{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMessageFromType = exports.createMessageFromName = exports.parseConfigure = exports.isPrimitiveField = void 0;\nconst tslib_1 = require(\"tslib\");\nconst protobuf = tslib_1.__importStar(require(\"protobufjs/light\"));\nconst primitiveTypes = ['bool', 'string', 'bytes', 'int32', 'int64', 'uint32', 'uint64', 'sint32', 'sint64', 'fixed32', 'fixed64', 'sfixed32', 'sfixed64', 'double', 'float'];\nconst isPrimitiveField = field => primitiveTypes.includes(field);\nexports.isPrimitiveField = isPrimitiveField;\nfunction parseConfigure(data) {\n  if (typeof data === 'string') {\n    return protobuf.Root.fromJSON(JSON.parse(data));\n  }\n  return protobuf.Root.fromJSON(data);\n}\nexports.parseConfigure = parseConfigure;\nconst createMessageFromName = (messages, name) => {\n  const Message = messages.lookupType(name);\n  const MessageType = messages.lookupEnum('MessageType');\n  let messageType = MessageType.values[`MessageType_${name}`];\n  if (!messageType && Message.options) {\n    messageType = Message.options['(wire_type)'];\n  }\n  return {\n    Message,\n    messageType\n  };\n};\nexports.createMessageFromName = createMessageFromName;\nconst createMessageFromType = (messages, typeId) => {\n  const MessageType = messages.lookupEnum('MessageType');\n  const messageName = MessageType.valuesById[typeId].replace('MessageType_', '');\n  const Message = messages.lookupType(messageName);\n  return {\n    Message,\n    messageName\n  };\n};\nexports.createMessageFromType = createMessageFromType;","map":{"version":3,"names":["Object","defineProperty","exports","value","createMessageFromType","createMessageFromName","parseConfigure","isPrimitiveField","tslib_1","require","protobuf","__importStar","primitiveTypes","field","includes","data","Root","fromJSON","JSON","parse","messages","name","Message","lookupType","MessageType","lookupEnum","messageType","values","options","typeId","messageName","valuesById","replace"],"sources":["/Users/Devdev/Documents/GitHub/Cycle_Codebase/cycle-skelly/node_modules/@trezor/protobuf/lib/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMessageFromType = exports.createMessageFromName = exports.parseConfigure = exports.isPrimitiveField = void 0;\nconst tslib_1 = require(\"tslib\");\nconst protobuf = tslib_1.__importStar(require(\"protobufjs/light\"));\nconst primitiveTypes = [\n    'bool',\n    'string',\n    'bytes',\n    'int32',\n    'int64',\n    'uint32',\n    'uint64',\n    'sint32',\n    'sint64',\n    'fixed32',\n    'fixed64',\n    'sfixed32',\n    'sfixed64',\n    'double',\n    'float',\n];\nconst isPrimitiveField = (field) => primitiveTypes.includes(field);\nexports.isPrimitiveField = isPrimitiveField;\nfunction parseConfigure(data) {\n    if (typeof data === 'string') {\n        return protobuf.Root.fromJSON(JSON.parse(data));\n    }\n    return protobuf.Root.fromJSON(data);\n}\nexports.parseConfigure = parseConfigure;\nconst createMessageFromName = (messages, name) => {\n    const Message = messages.lookupType(name);\n    const MessageType = messages.lookupEnum('MessageType');\n    let messageType = MessageType.values[`MessageType_${name}`];\n    if (!messageType && Message.options) {\n        messageType = Message.options['(wire_type)'];\n    }\n    return {\n        Message,\n        messageType,\n    };\n};\nexports.createMessageFromName = createMessageFromName;\nconst createMessageFromType = (messages, typeId) => {\n    const MessageType = messages.lookupEnum('MessageType');\n    const messageName = MessageType.valuesById[typeId].replace('MessageType_', '');\n    const Message = messages.lookupType(messageName);\n    return {\n        Message,\n        messageName,\n    };\n};\nexports.createMessageFromType = createMessageFromType;\n//# sourceMappingURL=utils.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAGF,OAAO,CAACG,qBAAqB,GAAGH,OAAO,CAACI,cAAc,GAAGJ,OAAO,CAACK,gBAAgB,GAAG,KAAK,CAAC;AAC1H,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAO,CAAC;AAChC,MAAMC,QAAQ,GAAGF,OAAO,CAACG,YAAY,CAACF,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAClE,MAAMG,cAAc,GAAG,CACnB,MAAM,EACN,QAAQ,EACR,OAAO,EACP,OAAO,EACP,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,SAAS,EACT,SAAS,EACT,UAAU,EACV,UAAU,EACV,QAAQ,EACR,OAAO,CACV;AACD,MAAML,gBAAgB,GAAIM,KAAK,IAAKD,cAAc,CAACE,QAAQ,CAACD,KAAK,CAAC;AAClEX,OAAO,CAACK,gBAAgB,GAAGA,gBAAgB;AAC3C,SAASD,cAAcA,CAACS,IAAI,EAAE;EAC1B,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAOL,QAAQ,CAACM,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,CAAC;EACnD;EACA,OAAOL,QAAQ,CAACM,IAAI,CAACC,QAAQ,CAACF,IAAI,CAAC;AACvC;AACAb,OAAO,CAACI,cAAc,GAAGA,cAAc;AACvC,MAAMD,qBAAqB,GAAGA,CAACe,QAAQ,EAAEC,IAAI,KAAK;EAC9C,MAAMC,OAAO,GAAGF,QAAQ,CAACG,UAAU,CAACF,IAAI,CAAC;EACzC,MAAMG,WAAW,GAAGJ,QAAQ,CAACK,UAAU,CAAC,aAAa,CAAC;EACtD,IAAIC,WAAW,GAAGF,WAAW,CAACG,MAAM,CAAE,eAAcN,IAAK,EAAC,CAAC;EAC3D,IAAI,CAACK,WAAW,IAAIJ,OAAO,CAACM,OAAO,EAAE;IACjCF,WAAW,GAAGJ,OAAO,CAACM,OAAO,CAAC,aAAa,CAAC;EAChD;EACA,OAAO;IACHN,OAAO;IACPI;EACJ,CAAC;AACL,CAAC;AACDxB,OAAO,CAACG,qBAAqB,GAAGA,qBAAqB;AACrD,MAAMD,qBAAqB,GAAGA,CAACgB,QAAQ,EAAES,MAAM,KAAK;EAChD,MAAML,WAAW,GAAGJ,QAAQ,CAACK,UAAU,CAAC,aAAa,CAAC;EACtD,MAAMK,WAAW,GAAGN,WAAW,CAACO,UAAU,CAACF,MAAM,CAAC,CAACG,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;EAC9E,MAAMV,OAAO,GAAGF,QAAQ,CAACG,UAAU,CAACO,WAAW,CAAC;EAChD,OAAO;IACHR,OAAO;IACPQ;EACJ,CAAC;AACL,CAAC;AACD5B,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}